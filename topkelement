/*
Top K Frequent Elements
Medium
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

*/

package main
import "fmt"

func topKFrequent(nums []int, k int) []int {
    m := make(map[int]int)
    var answer []int
    a := make([][]int,len(nums)+1)
    for _,val := range nums {
        m[val]++
    } 
    for key,value := range m {
          a[value] = append(a[value],key)
    }
    for i:=len(a)-1;i>=0 && len(answer) < k ; i-- {
        if len(a[i]) != 0 {
            answer = append(answer,a[i]...)
        }
    }
    return answer
}

func main() {
	var a []int
	a = append(a, 1)
	a = append(a, 2)
	a = append(a, 3)
	a = append(a, 3)
	a = append(a, 2)
	a = append(a, 3)
	a = append(a, 3)
	b := topKFrequent(a, 2)
  fmt.Println(b)
}
